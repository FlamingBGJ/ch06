# -*- coding: utf-8 -*-
"""ch06.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TwzR4jvJZ54LbLehjHkPlS4AT8kodDOB

#map 함수와 filter 함수
```
def call_100(func):
  for i in range(10):
  func()
def print_hello():
print("안녕하세요")
```
- 함수를 매개변수로 전달하는 대표적인 내장함수
- map() 함수
   - 리스트의 요소를 함수에 넣고 리턴된 값으로 새로운 리스트를 구성해주는 함수
```
map(<function>,<list>)

- filter()함수
  - 리스트의 요소를 함수에 넣고 리턴된 값이 True인 것으로 새로운 리스트를 구성해준다.
```
filter(<함수>,<리스트>)
```
"""

list_input_a = [1,2,3,4,5]

def power(items):
  return items*items

map_output = map(power, list_input_a)

print(map_output)

type(map_output)

list(map_output)

# filter example
def under_3(items):
  return items < 3

filter_output = filter(under_3, list_input_a)

type(filter_output)
print(list(filter_output))

"""# 재귀함수
```
- n! = n * (n-1) * (n-2)* (n-3)* ....1
```
"""

def factorial(n):
  output = 1
  for i in range(1,n+1):
    output += i
  return output

factorial(5)

"""#재귀함수(2)
```
n! = n* (n-1)* (n-2)* (n-3)* ...*1 = n*(n-1)!
```

```
기본형
del func():
  if<condition>
    return value
  else:
    return value*func()
```
"""

def factorial_r(n):
  if n == 0:
    return 1
  else:
    return n*factorial_r(n-1)

factorial_r(5)

"""https://pythontutor.com/"""

# 1부터 n 까지의 합
# x^n을 구하는 함수를 만들어라
def recur_sum(n):
  if n == 0:
    return 0
  else:
    return n+recur_sum(n-1)

recur_sum(10)

def sqr_n(x,n):
  if n == 0:
    return 1
  else:
    return x * sqr_n(x,n-1)

sqr_n(2,10)

"""#  16 와 21의 최대공약수
```
16    21
21    16
21-16 16
16     5
16-15  5
5-5    1
0      1
```
이걸 로직으로 변환

```
숫자 m,n

경우 1, m<n
 - m과 n의 위치를 바꿔준다.

경우 2, m>n인 경우
 - m에서 n을 나눠 나머지만 갖고온다.
 - m에서 n을 나눠 몫이 0일때까지 반복한다.
```
"""

def gcd(m,n):
  if m < n:
    return(gcd(n,m))  
  else:
    o = m - n
    gcd_2(n,o)

def gcd_2(n,o):
  if o == 0:
    print(n)
    return n
  else:
    p = n%o
    return(gcd_2(o,p))
# 뭐가 잘못된건지 생각해볼것

print(gcd(15,12))

def gcd_3(m,n):
  if m < n:
    m,n = n,m
  if m%n == 0:
    return n
  else:
    return gcd(n,m%n)

gcd_3(21,18)

"""#연습문제 - 피보나치 수열
```
1, 1, 2, 3, 5, 8, 13...
fibo의 탈출 조건은? n=1, n=2
탈출이 안된다면? fibo(n-2) + fibo(n-1) = fibo(n)
```
"""

def fibo(n):
  if (n == 1) | (n == 2):
    return(1)
  else:
    return(fibo(n-1)+fibo(n-2))

# 피보나치 수열은 몇 번 계산 될까?

counter = 0

def fibo(n):
  global counter
  counter += 1
  print(f"fibonacci{n}을 구합니다.")
  if (n == 1) | (n == 2):
    return(1)
  else:
    return(fibo(n-1)+fibo(n-2))

fibo(10)

print(counter)

"""# 메모화
- 이미 연산된 값을 메모화해서 저장해둔다.
위 피보나치와 같이 여러번 연산을 하는 경우 계산값이 기하급수적으로 많아지기 때문에 이를 메모화를 통해 극복할 수 있다.
"""

fibo_dic = {1:1,2:1}
counter = 0

def fibo_2(n):
  if n in fibo_dic:
    global counter
    counter+=1
    # 메모되어있는 값을 리턴
    return fibo_dic[n]
  else:
    #메모되지 않은 값을 구함
    output = fibo_2(n-1) +fibo_2(n-2)
    fibo_dic[n] = output
    return output

fibo_2(20)

fibo_dic

# 더 해보고 싶은 사람은 하노이의 탑 문제를 직접 코딩해볼것

"""# Class
 - 객체 : 개별 데이터
  - 파이썬에서는 객체(object)라는 단위로 메모리 위에 정보를 관리
  - 일단 메모리에 올라가면 객체
  - 객체는 value, type, id를 가진다.
  - 같은 객체는 같은 id를 가진다.

# 클래스와 인스턴스의 관계
 - 객체가 어떤 클래스에 속할 때, 그 객체를 그 클래스의 인스턴스라고 한다.
 - 클래스에 의해 생성된 객체
"""

# 명함 제작하는 스타트업을 창업
# 이름, 이메일, 주소

name_1 = "Byung_gil"
email_1 = "win3153@naver.com"
add_1 = "kimchun"

def print_business_card(name, email, add):
  print("-"*10)
  print(f"Name : {name}")
  print(f"Email : {email}")
  print(f"add : {add}")
  print("-"*10)

print_business_card(name_1,email_1,add_1)

# 고객이 2명으로 늘어납니다.
name_2 = "gildong"
email_2  = "gildong@naver.com"
add_2 = "seoul"

print_business_card(name_2,email_2,add_2)

"""- 회원수가 계속 늘어날 때, 변수명을 어떻게 추가할까?
- 기존의 프로그래밍은 리스트에 저장한다.
```
- name_list = [name1, name2, name3, ....]
- email_list = [email1, email2, email3,...]
-add_list = [add1, add2, add3, ....]
```
"""

#명함 클래스를 정의
class BusinessCard:
  def sel_info(self, name, email, add):
    self.name = name #함수의 인자는 반드시 self여야한다./ 변수에 값을 대입 
    self.email = email
    self.add = add

member_1 = BusinessCard() #인스턴스 생성

member_1

type(member_1)

id(member_1)

# 명함 클래스를 정의
class BussinessCard:
  def set_info(self, name, email, add):
    self.name = name # 변수에 값을 대입 self 는 객체 자신을 의미 한다. 
    self.email = email
    self.add = add

member_2 = BussinessCard()

member_2.set_info("user1", "user1@email.com", "add1")

member_2.name

member_2.email

member_2.add

"""#응용
- member_3.print_bussiness()
"""

# 명함 클래스를 정의
class BussinessCard:
  def set_info(self, name, email, add):
    self.name = name # 변수에 값을 대입 self 는 객체 자신을 의미 한다. 
    self.email = email
    self.add = add
  def print_bussiness_card(self):
    print("-"*10)
    print(f"Name : {self.name}")
    print(f"Email : {self.email}")
    print(f"add : {self.add}")
    print("-"*10)

member_4 = BussinessCard()

member_4.set_info("user2","user2@email.com","seoul")

member_4.print_bussiness_card()

#클래스를 만들어보세요
# 학생 정보를 입력받는 class
# 이름, 국어점수, 수학점수를 입력받고 출력할 수 있어야 함.
# 이름, 각 과목점수, 총점, 평균

class StudentScore:
  def set_info(self, name, korean_score, math_score):
    self.name = name
    self.korean_score = korean_score
    self.math_score = math_score
  def sum_score(self):
    sum = int(self.korean_score) + int(self.math_score)
    return sum
  def print_student_score(self):
    print("-"*10)
    print(f"이름 : {self.name}")
    print(f"국어 : {self.korean_score}")
    print(f"수학 : {self.math_score}")
    print(f"총점 : {self.sum_score()}")
    print(f"평균 : {(int(self.korean_score)+int(self.math_score))/2}")
    print("-"*10)

student_1 = StudentScore()

student_1.set_info("정병길","50","70")

student_1.print_student_score()

#__init___ : 생성자는 인스턴스 객체가 생성될 떄 초기화를 위해서 자동으로 호출되는 메소드
#___del___ : 메모리에서 제거될 때 자동으로 호출되는 메소드
class Student:
  #def set_info(self, name, korean, math):
  def __init__(self, name, korean, math):
    self.name = name
    self.korean = korean
    self.math = math

  def get_sum(self):
    return self.korean + self.math
  
  def get_average(self):
    return self.get_sum()/2
  
  def print_string(self):
    print(f'''
    이름 : {self.name}
    국어 : {self.korean}
    수학 : {self.math}
    총점 : {self.get_sum()}
    평균 : {self.get_average()}
    ''')

student_2 = Student("byunggil",80,90)

